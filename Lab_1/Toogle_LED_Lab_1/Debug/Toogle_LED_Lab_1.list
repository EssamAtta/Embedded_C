
Toogle_LED_Lab_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000154  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000284  08000284  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000284  08000284  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000284  08000284  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000284  08000284  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000284  08000284  00010284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000288  08000288  00010288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800028c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000290  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000290  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000015e  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000f1  00000000  00000000  0002018b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000032  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000048  00000000  00000000  000202b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000048  00000000  00000000  000202f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000f26  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000423  00000000  00000000  00021266  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00003bcd  00000000  00000000  00021689  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00025256  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000004c  00000000  00000000  000252d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	0800026c 	.word	0x0800026c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	0800026c 	.word	0x0800026c

08000170 <main>:
} R_ODR_t;

volatile R_ODR_t* ODR = (volatile R_ODR_t *) (RCC_BASE + 0x0C); // pointer type Union to reigster GPIO_PA_ODR

int main(void) {
	RCC_APB2ENR |= 1 << 2; // Enable 2nd bit equal 1
 8000170:	4a14      	ldr	r2, [pc, #80]	; (80001c4 <main+0x54>)
 8000172:	6813      	ldr	r3, [r2, #0]
 8000174:	f043 0304 	orr.w	r3, r3, #4
 8000178:	6013      	str	r3, [r2, #0]
	GPIO_CRH &= 0xFF0FFFFF;
 800017a:	4b13      	ldr	r3, [pc, #76]	; (80001c8 <main+0x58>)
 800017c:	681a      	ldr	r2, [r3, #0]
 800017e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000182:	601a      	str	r2, [r3, #0]
	GPIO_CRH |= 0x00200000;
 8000184:	681a      	ldr	r2, [r3, #0]
 8000186:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800018a:	601a      	str	r2, [r3, #0]
 800018c:	e011      	b.n	80001b2 <main+0x42>

	/* Loop forever */
	for (;;) {
		ODR->Pin.P_13 = LED_ON;
		for (int i = 0; i < 5000; i++)
			ODR->Pin.P_13 = LED_OFF;
 800018e:	4a0f      	ldr	r2, [pc, #60]	; (80001cc <main+0x5c>)
 8000190:	6812      	ldr	r2, [r2, #0]
 8000192:	8811      	ldrh	r1, [r2, #0]
 8000194:	f36f 314d 	bfc	r1, #13, #1
 8000198:	8011      	strh	r1, [r2, #0]
		for (int i = 0; i < 5000; i++)
 800019a:	3301      	adds	r3, #1
 800019c:	f241 3287 	movw	r2, #4999	; 0x1387
 80001a0:	4293      	cmp	r3, r2
 80001a2:	ddf4      	ble.n	800018e <main+0x1e>
		for (int i = 0; i < 5000; i++);
 80001a4:	2300      	movs	r3, #0
 80001a6:	e000      	b.n	80001aa <main+0x3a>
 80001a8:	3301      	adds	r3, #1
 80001aa:	f241 3287 	movw	r2, #4999	; 0x1387
 80001ae:	4293      	cmp	r3, r2
 80001b0:	ddfa      	ble.n	80001a8 <main+0x38>
		ODR->Pin.P_13 = LED_ON;
 80001b2:	4b06      	ldr	r3, [pc, #24]	; (80001cc <main+0x5c>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	8819      	ldrh	r1, [r3, #0]
 80001b8:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 80001bc:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < 5000; i++)
 80001be:	2300      	movs	r3, #0
 80001c0:	e7ec      	b.n	800019c <main+0x2c>
 80001c2:	bf00      	nop
 80001c4:	40021018 	.word	0x40021018
 80001c8:	40010804 	.word	0x40010804
 80001cc:	20000000 	.word	0x20000000

080001d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001d0:	480d      	ldr	r0, [pc, #52]	; (8000208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001d2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001d8:	480c      	ldr	r0, [pc, #48]	; (800020c <LoopForever+0x6>)
  ldr r1, =_edata
 80001da:	490d      	ldr	r1, [pc, #52]	; (8000210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001dc:	4a0d      	ldr	r2, [pc, #52]	; (8000214 <LoopForever+0xe>)
  movs r3, #0
 80001de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001e0:	e002      	b.n	80001e8 <LoopCopyDataInit>

080001e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001e6:	3304      	adds	r3, #4

080001e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001ec:	d3f9      	bcc.n	80001e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001f0:	4c0a      	ldr	r4, [pc, #40]	; (800021c <LoopForever+0x16>)
  movs r3, #0
 80001f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001f4:	e001      	b.n	80001fa <LoopFillZerobss>

080001f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001f8:	3204      	adds	r2, #4

080001fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001fc:	d3fb      	bcc.n	80001f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001fe:	f000 f811 	bl	8000224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000202:	f7ff ffb5 	bl	8000170 <main>

08000206 <LoopForever>:

LoopForever:
    b LoopForever
 8000206:	e7fe      	b.n	8000206 <LoopForever>
  ldr   r0, =_estack
 8000208:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800020c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000210:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000214:	0800028c 	.word	0x0800028c
  ldr r2, =_sbss
 8000218:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800021c:	20000020 	.word	0x20000020

08000220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000220:	e7fe      	b.n	8000220 <ADC1_2_IRQHandler>
	...

08000224 <__libc_init_array>:
 8000224:	b570      	push	{r4, r5, r6, lr}
 8000226:	2500      	movs	r5, #0
 8000228:	4e0c      	ldr	r6, [pc, #48]	; (800025c <__libc_init_array+0x38>)
 800022a:	4c0d      	ldr	r4, [pc, #52]	; (8000260 <__libc_init_array+0x3c>)
 800022c:	1ba4      	subs	r4, r4, r6
 800022e:	10a4      	asrs	r4, r4, #2
 8000230:	42a5      	cmp	r5, r4
 8000232:	d109      	bne.n	8000248 <__libc_init_array+0x24>
 8000234:	f000 f81a 	bl	800026c <_init>
 8000238:	2500      	movs	r5, #0
 800023a:	4e0a      	ldr	r6, [pc, #40]	; (8000264 <__libc_init_array+0x40>)
 800023c:	4c0a      	ldr	r4, [pc, #40]	; (8000268 <__libc_init_array+0x44>)
 800023e:	1ba4      	subs	r4, r4, r6
 8000240:	10a4      	asrs	r4, r4, #2
 8000242:	42a5      	cmp	r5, r4
 8000244:	d105      	bne.n	8000252 <__libc_init_array+0x2e>
 8000246:	bd70      	pop	{r4, r5, r6, pc}
 8000248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800024c:	4798      	blx	r3
 800024e:	3501      	adds	r5, #1
 8000250:	e7ee      	b.n	8000230 <__libc_init_array+0xc>
 8000252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000256:	4798      	blx	r3
 8000258:	3501      	adds	r5, #1
 800025a:	e7f2      	b.n	8000242 <__libc_init_array+0x1e>
 800025c:	08000284 	.word	0x08000284
 8000260:	08000284 	.word	0x08000284
 8000264:	08000284 	.word	0x08000284
 8000268:	08000288 	.word	0x08000288

0800026c <_init>:
 800026c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800026e:	bf00      	nop
 8000270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000272:	bc08      	pop	{r3}
 8000274:	469e      	mov	lr, r3
 8000276:	4770      	bx	lr

08000278 <_fini>:
 8000278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800027a:	bf00      	nop
 800027c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800027e:	bc08      	pop	{r3}
 8000280:	469e      	mov	lr, r3
 8000282:	4770      	bx	lr
